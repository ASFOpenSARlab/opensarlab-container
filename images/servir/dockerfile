FROM jupyter/base-notebook:ubuntu-20.04 as release

# Base Stage ****************************************************************
USER root
WORKDIR /

RUN set -ve

RUN apt update && \
    apt install -y \
        software-properties-common \
        git && \
    apt update

RUN add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable && \
    apt update && \
    apt upgrade -y

COPY tests/* /tests/

# SNAP  ****************************************************************
RUN apt install --no-install-recommends -y \
    default-jdk-headless

# TRAIN  ****************************************************************
RUN apt install --no-install-recommends -y \
    gdal-bin

COPY TRAIN/ /usr/local/TRAIN/

RUN apt install -y \
    proj-bin \
    geotiff-bin \
    libshp-dev \
    libshp2 \
    libhdf5-dev \
    libnetcdf-dev \
    libgdal-dev \
    libgsl-dev

# Install general items. If a library is needed for a specific piece of software, put it with that software.
RUN apt update && \
    apt install --fix-missing --no-install-recommends -y \
        zip \
        unzip \
        wget \
        vim \
        rsync \
        less \
        snaphu \
        curl \
        openssh-client \
        libgl1-mesa-glx \
        emacs \
        gnupg2 \
        jq \
        gfortran

# Install texlive for PDF exporting of notebooks containing LaTex
RUN apt install texlive-xetex texlive-fonts-recommended texlive-plain-generic -y

# Update conda and mamba: this breaks things in the hook, need to play with it more
#RUN mamba update -c conda-forge -y conda mamba pip

RUN mamba install -c conda-forge -y awscli boto3 pyyaml bokeh plotly 'pyopenssl>=23.0.0'

# Install jupyter libaries
RUN mamba install -c conda-forge -y jupyter_contrib_nbextensions jupyter-resource-usage nb_conda_kernels jupyterlab-spellchecker ipympl kernda "jupyterlab_widgets<2.0.0" "ipywidgets<8.0.0"

#install dask libraries
RUN mamba install -c conda-forge -y dask-gateway dask distributed

# Install OpenSARlab's widgets and extensions
RUN python -m pip install url-widget opensarlab-frontend==1.4.2

# Make sure that any files in the home directory are jovyan permission
RUN chown -R jovyan:users $HOME/

# Add sudo group user 599 elevation
RUN addgroup -gid 599 elevation \
    && echo '%elevation ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

# Clean up a few other things at the end
RUN apt update && \
    rm -rf /var/lib/apt/lists/* && \
    apt autoremove -y && \
    mamba clean --yes --all

# Make sure mamba (within conda) has write access
RUN chmod -R 777 /opt/conda/pkgs/

# Use the kernel display name `base` for the base conda environment
RUN mamba run -n base kernda --display-name base -o /opt/conda/share/jupyter/kernels/python3/kernel.json

# Remove the logout option from the main menu to steer users to the hub control panel
# Remove the launch classic notebook option to avoid broken classic terminals and image loading errors
RUN SETTINGS=/opt/conda/share/jupyter/lab/settings && \
    mkdir -p $SETTINGS && \
    OVERRIDES=$SETTINGS/overrides.json && \
    TEMP=$SETTINGS/temp && \
    jq '. += {"@jupyterlab/mainmenu-extension:plugin": {"menus": [{"id": "jp-mainmenu-file", "items": [{"command": "hub:logout", "disabled": true}]}]}}' $OVERRIDES > $TEMP && \
    jq '.["@jupyterlab/mainmenu-extension:plugin"].menus[1] |= {"id": "jp-mainmenu-help", "items": [{"command": "help:launch-classic-notebook", "disabled": true}]}' $TEMP > $OVERRIDES && \
    jq '. += {"opensarlab_frontend:plugin": {"controlbtn": {"enabled": true, "rank": 1110}, "doc_link": {"enabled": true, "rank": 1100}, "gifcap_btn": {"enabled": true, "rank": 1025},"oslnotify": {"enabled": true, "note_type": "storage,calendar"}, "profile_label": {"enabled": true, "rank": 1050}}}' $OVERRIDES > $TEMP && \
    mv $TEMP $OVERRIDES

RUN rm -rf /home/jovyan/..?* /home/jovyan/.[!.]* /home/jovyan/*
WORKDIR /home/jovyan
RUN conda init
USER jovyan

##########################################

FROM release as testing 

RUN bash /tests/sar.sh
